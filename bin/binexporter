#!/usr/bin/env python3
# coding: utf-8

import logging
import os.path
import magic
import click

from binexport import ProgramBinExport

BINARY_FORMAT = {'application/x-dosexec',
                 'application/x-sharedlib',
                 'application/x-mach-binary',
                 'application/x-executable'}

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'],
                        max_content_width=300)


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('-i', '--ida-path', type=click.Path(exists=True), default=None, help="IDA Pro installation directory")
@click.argument("input", type=click.Path(exists=True), metavar="<binary file>")
def main(ida_path, input):
    """
    binexporter is a very simple utility to generate a .BinExport file
    for a given binary. It all open the binary file and export the file
    seamlessly.
    """

    logging.basicConfig(format='[%(levelname)s] %(message)s', level=logging.INFO)

    if ida_path:
        os.environ['IDA_PATH'] = os.path.abspath(ida_path)

    if magic.from_file(input, mime=True) not in BINARY_FORMAT:
        logging.error("the file is not an executable file")
        exit(1)

    if ProgramBinExport.from_binary_file(input):
        logging.info("binexport written to: %s" % (os.path.splitext(input)[0]+".BinExport"))
        exit(0)
    else:
        exit(1)


if __name__ == '__main__':
    main()
